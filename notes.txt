GETTING STARTED
- initialize git repo
> git init

- move files to staging area
> git add *.py

- commit to git
> git commit -m "MSG"

- direct commit to git, without moving to staging area
> git commit -am "MSG"

- removing files 
> git rm <file_name/pattern>

- renaming files 
> git mv <old file_name> <new file_name>

- ignoring already tracked file
    - add already tracked file to .gitignore
    - show files in staging area
    > git ls-files
    - remove file from only from staging area
    > git rm --cached <file_name>
    - add files to staging area
    - commit

- review code in staging area
> git diff --staged

- check log
> git log --oneline --all --reverse --graph

- show changes in commits
> git show <commit_id>

- show all files changed in commit
> git ls-tree <commit_id>

- unstage changes
> git reset <file_name>
> git restore --staged <file_name>

- discard all changes in current working directory
> git clean
> git clean -fd

- restore a file that was accidently deleted from previous commit
> git restore --source=HEAD~1 <file_path>





BROWSING HISTORY

- view history 
> git log

- view all files changed in each commit
> git log --oneline --stat

- view file content that's been changed
> git log --oneline --patch

- filtering history
    - last n commits
    > git log --oneline -n
    - by author
    > git log --oneline --author="<author name>"
    - by date
    > git log --oneline --before="2020-08-17" --after="2020-08-17"
    > git log --oneline --before="yesterday" --after="one week ago"
    - by commit msg
    > git log --oneline --grep="GUI"
    - by content (added specific word)
    > git log --oneline -S"git_opeation"
    > git log --oneline -S"git_opeation" --patch
    - by commit range
    > git log --oneline <commit_id>..<commit_id>
    - which modified a particular file
    > git log --oneline <file_name>
    > git log --oneline -- <file_name>

- Formatting log output
> git log --pretty=format:"%Cgreen%an%Creset comitted %h on %cd"

- adding alias
> git config --global alias.<alias> "<cmd>"
> git config --global alias.lg "log --pretty=format:'%Cgreen%an%Creset comitted %h on %cd'"

- edit global config file
> git config --global -e

- check file names that were modified in a commit 
> git show <commit_id> --name-only

- check file names that were modified in a commit with status
> git show <commit_id> --name-status

- show changes across commits
> git diff HEAD~2 HEAD --name-only <optional file_name>

- checking out a commit
> git checkout <commit_id>

- finding bugs using bisect
> git bisect start
> mark current commit as bad > git bisect bad
> provide last known good commit > git bisect good <commit_id>
> check current HEAD state if good/bad and mark it > git bisect good/bad
> once done > git bisect reset

- find contributers
> git shortlog

- restoring deleted file from history
> git checkout <commit_id> <file_name>

- blame for code
> git blame <file_name>
> git blame -L 1,3 <file_name>

- tagging
> git tag v1.0 <commit_id>

- view tags with messages
> git tag -n

- annotated tags
> git tag -a v1.1 -m "msg"

- delete tag
> git tag -d v1.1





BRANCHING

- view branches
> git branch

- create a branch
> git branch <branch_name>

- switch to different branch
> git switch <branch_name>

- create and switch to new branch
> git switch -C <branch_name>

- rename existing branch
> git branch -m <old branch_name> <new branch_name>

- delete a branch (force delete using -D)
> git branch -d <branch_name>

- Comparing branch 
    - Commits that are in branch_name2 but not in branch_name1
    > git log <branch_name1>..<branch_name2>
    - Comparing changes
    > git diff <branch_name1>..<branch_name2>
    - View only files changed
    > git diff --name-only <branch_name1>..<branch_name2>
    > git diff --name-status <branch_name1>..<branch_name2>

- Stashing changes
(By default, stash doesn't save untracked files, to include them in stash, use --all)
> git stash push -m "<msg>"
> git stash push --all -m "<msg>"

- List stash
> git stash list

- Show changes from stash
> git stash show stash@{#}
> git stash show #

- Apply stash changes
> git stash apply #

- Delete stash
    - drop stash by number
    > git stash drop #
    - drop all stash
    > git stash clear

- Merging branch
> git merge <branch_name>

- Merging branch without fast-forward even if its available
> git merge --no-ff <branch_name>

- Viewing merged and unmerged branches
> git branch --merged
> git branch --no-merged

- Cancel merge 
> git merge --abort

- Undo faulty merge
    - removing last commit (local only)
    > git reset --hard HEAD~1
    - new commit reverting changes
    > git revert HEAD
    > git revert -m <parent> HEAD 

- Squashing commit
> git merge --squash <branch_name>
The above statement will add files to STAGING AREA

- Rebasing (local only)
>> go to feature branch and
> git rebase <master>
>> in case of conflict, resolve it and 
> git rebase --continue
>> other options --skip, --abort

- Cherry Picking
> git cherry-pick <commit_id>

- Picking file from one branch to another
> git restore --source=<from branch> <filename>
OR 
> git restore --source=<from branch> -- <filename>





COLLABORATING

- Cloning a repo
> git clone <repo url> <optional directory name>

- check remote repos
> git remote

- check remote repo details
> git remote -v

- get new commits from remote repo
> git fetch

- check divergence bw local and remote branch
> git branch -vv

- pull changes from remote repo (fetch + merge)
> git pull

- Rebasing while pulling
> git pull --rebase

- push changes to remote repo
    - first time
    > git push origin master
    - subsequent times
    > git push
    - force push (DONT USE)
    > git push -f 

- push branch to remote
    - first time 
    > git push -u origin <branch_name>
    - subsequent push
    > git push

- save credentials to cache 
> git config --global credentials.helper cache

- push tags to Commits
> git push origin <tag_name>

- delete tags
    - from remote repo
    > git push origin --delete <tag_name>
    - from local repo
    > git tag -d <tag_name>

- check remote branches
> git branch -r 

- remove remote branches from local
> git remote prune origin





REWRITING HISTORY (only use for local repos)

- removing commit
    - only removes the commit, doesn't change working directory or staging area
    > git reset --soft HEAD~1

    - removes the commit and unstage files from staging area
    > git reset --mixed HEAD~1
    
    - undo changes in working directory and staging area
    > git reset --hard HEAD~1

- check HEAD history in case of wrong reset
> git reflog

- undo reset by moving HEAD
> git reset --hard <commit id>

- modify/amend last commit
> stage changes
> git commit --amend

- modify/amend earlier commit (interactive rebasing)
> git rebase -i <old commit_id>
can be used to - 
    - amend earlier commit (include/exclude files)
    - drop intermediate commits
    - rewording commit messages
    - reordering commits
    - squash multiple previous commit
    - split a commit


